package com.skilldistillery.todoapp.controllers;

import java.security.Principal;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.skilldistillery.todoapp.entities.Todo;
import com.skilldistillery.todoapp.entities.User;
import com.skilldistillery.todoapp.services.AuthService;
import com.skilldistillery.todoapp.services.TodoService;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@CrossOrigin({ "*", "http://localhost/" })
@RequestMapping("api")
@RestController
public class TodoController {

	@Autowired
	private TodoService todoService;
	
	@Autowired
	private AuthService authService;

	private String username = "shaun";
	
	@GetMapping("authenticate")
	public User authenticate(Principal principal, HttpServletResponse res) {
	  if (principal == null) { // no Authorization header sent
	     res.setStatus(401);
	     res.setHeader("WWW-Authenticate", "Basic");
	     return null;
	  }
	  return authService.getUserByUsername(principal.getName());
	}

	@GetMapping("todos")
	public Set<Todo> index(HttpServletResponse res, HttpServletRequest req) {
		return todoService.index(username);
	}

	@GetMapping(path = "todos/{tid}")
	public Todo findTodo(@PathVariable("tid") int tid, HttpServletResponse res, HttpServletRequest req) {
		Todo todo = todoService.show(username, tid);
		try {
			if (todo == null) {
				res.setStatus(404);
			}
		} catch (Exception e) {
			res.setStatus(400);
			e.printStackTrace();
		}
		return todo;
	}

	@PostMapping(path = "todos")
	public Todo createTodo(@RequestBody Todo todo, HttpServletResponse res, HttpServletRequest req) {
		try {
			if (todo != null) {
				res.setStatus(201);
				res.setHeader("Location", req.getRequestURL().append("/").append(todo.getId()).toString());
				return todoService.create(username, todo);
			} else {
				res.setStatus(401);
			}
		} catch (Exception e) {
			e.printStackTrace();
			res.setStatus(400);
		}
		return todo;
	}

	@PutMapping(path = "todos/{tid}")
	public Todo updateTodo(@PathVariable("tid") Integer tid, @RequestBody Todo todo, HttpServletResponse res,
			HttpServletRequest req) {
		Todo updated;
		try {
			updated = todoService.update(this.username, tid, todo);
			if (updated == null) {
				res.setStatus(404);
			}
		} catch (Exception e) {
			e.printStackTrace();
			res.setStatus(400);
			updated = null;
		}
		return updated;
	}

	@DeleteMapping(path = "todos/{id}")
	public void deleteTodo(@PathVariable("id") Integer id, HttpServletResponse res, HttpServletRequest req) {
		try {
			if (todoService.destroy(username, id)) {
				res.setStatus(204);
			} else {
				res.setStatus(404);
			}
		} catch (Exception e) {
			e.printStackTrace();
			res.setStatus(400);
		}

	}
}
